import argparse
import logging
import os
import shutil

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"
    )

    parser.add_argument(
        "--project_dir",
        "-p",
        type=str,
        required=True,
        help="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)",
    )

    return parser.parse_args()


def create_directory_structure(project_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    os.makedirs(project_dir, exist_ok=True)

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    input_dir = os.path.join(project_dir, "input")
    reports_dir = os.path.join(input_dir, "reports")
    passports_dir = os.path.join(input_dir, "passports")
    os.makedirs(input_dir, exist_ok=True)
    os.makedirs(reports_dir, exist_ok=True)
    os.makedirs(passports_dir, exist_ok=True)

    return {
        "project_dir": project_dir,
        "input_dir": input_dir,
        "reports_dir": reports_dir,
        "passports_dir": passports_dir,
    }


def create_criteria_file(project_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"""

    criteria_path_src = "–ö—Ä–∏—Ç–µ—Ä–∏–∏.txt"
    criteria_path_dst = os.path.join(project_dir, "–ö—Ä–∏—Ç–µ—Ä–∏–∏.txt")

    shutil.copy(criteria_path_src, criteria_path_dst)


def create_sample_prompts(project_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤"""

    prompts_dir_src = "prompts"
    prompts_dir_dst = os.path.join(project_dir, "prompts")

    if os.path.exists(prompts_dir_dst):
        shutil.rmtree(prompts_dir_dst)

    shutil.copytree(prompts_dir_src, prompts_dir_dst)

    return prompts_dir_dst


def main():
    args = parse_arguments()

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    dirs = create_directory_structure(args.project_dir)

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
    create_criteria_file(dirs["project_dir"])

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º–ø—Ç–æ–≤
    dirs["prompts_dir"] = create_sample_prompts(dirs["project_dir"])

    logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    logging.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {os.path.abspath(dirs['project_dir'])}")
    logging.info(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ:")
    logging.info(f"   - prompts: –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤")
    logging.info(f"   - input: –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    logging.info(f"     - input/reports: –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤")
    logging.info(f"     - input/passports: –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–æ–≤")
    logging.info(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏:")
    logging.info(f"   - {os.path.join(dirs['project_dir'], '–ö—Ä–∏—Ç–µ—Ä–∏–∏.txt')}")


if __name__ == "__main__":
    main()
