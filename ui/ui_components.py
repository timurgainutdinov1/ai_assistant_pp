import streamlit as st


def get_file_uploader(label, file_types):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ Streamlit.

    Args:
        label (str): –¢–µ–∫—Å—Ç –º–µ—Ç–∫–∏, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –Ω–∞–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
                     –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.
        file_types (list): –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤ –¥–ª—è
                           –∑–∞–≥—Ä—É–∑–∫–∏.

    Returns:
        streamlit.UploadedFile: –û–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ None,
                                –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.
    """
    return st.file_uploader(label, type=file_types)


def check_file_uploads(passport, criteria):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit.

    Args:
        passport: –û–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ None, –µ—Å–ª–∏
                  —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.
        criteria: –û–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏
                  —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.
    """
    warnings = []
    if passport is None:
        warnings.append("–ø–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
    if criteria is None:
        warnings.append("–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    if warnings:
        st.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {', '.join(warnings)}.")


def select_llm():
    """
    –°–æ–∑–¥–∞–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ LLM –º–æ–¥–µ–ª–∏ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

    Returns:
        str: –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º LLM –º–æ–¥–µ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
             –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.
    """
    return st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ LLM:",
        [
            # "GigaChat (Lite)",
            "DeepSeek Chat",
            "DeepSeek R1",
            "YandexGPT Pro",
            "YandexGPT Lite",
            # "Gemini 2.0 Pro",
            # "Gemini 2.5 Pro",
            # "Gemma 3 27B",
            "Gemini 2.0 Flash",
            # "Llama 3.3 70B Instruct",
            "Qwen 32B",
            "Qwen 2.5 72B",
            # "Mistral Small 24B",
        ],
    )


def create_download_section(check_result, html_content, pdf_bytes, file_name_base):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.

    Args:
        check_result (str): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        html_content (str): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML
        pdf_bytes (bytes): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF
        file_name_base (str): –ë–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    download_file_name_md = f"{file_name_base}_check_results.md"
    download_file_name_pdf = f"{file_name_base}_check_results.pdf"
    download_file_name_html = f"{file_name_base}_check_results.html"

    # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    save_format = st.selectbox(
        "üíæ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
        ["HTML", "PDF", "Markdown"],
        index=0,
    )

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    format_config = {
        "HTML": {
            "data": html_content,
            "file_name": download_file_name_html,
            "mime": "text/html",
        },
        "PDF": {
            "data": pdf_bytes,
            "file_name": download_file_name_pdf,
            "mime": "application/pdf",
        },
        "Markdown": {
            "data": check_result,
            "file_name": download_file_name_md,
            "mime": "text/plain",
        },
    }

    # –ï–¥–∏–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = format_config[save_format]
    st.download_button(label=f"üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ({save_format})", **config)


def create_project_upload_section():
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞.

    Returns:
        tuple: –ü–∞—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ streamlit.UploadedFile:
            - passport_file (streamlit.UploadedFile): –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ None
            - report_file (streamlit.UploadedFile): –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ None
    """
    passport_file = get_file_uploader(
        "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ (PDF/DOCX)", ["pdf", "docx"]
    )
    report_file = get_file_uploader(
        "üìù –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É (PDF/DOCX)", ["pdf", "docx"]
    )
    return passport_file, report_file


def create_criteria_section(default_criteria):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.

    Args:
        default_criteria (str): –¢–µ–∫—Å—Ç –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown

    Returns:
        tuple:
            - custom_criteria (bool): –ù—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            - new_criteria_file (streamlit.UploadedFile): –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –∏–ª–∏ None
    """
    with st.expander("–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):", icon="üìã"):
        st.markdown(default_criteria)

    custom_criteria = st.toggle("üîÑ –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤")
    new_criteria_file = (
        get_file_uploader(
            "üìã –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (TXT/PDF/DOCX)", ["txt", "pdf", "docx"]
        )
        if custom_criteria
        else None
    )

    return custom_criteria, new_criteria_file


def create_options_section():
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.

    Returns:
        tuple:
            - skip_feedback (bool): –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
            - llm_choice (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π LLM –º–æ–¥–µ–ª–∏
    """
    skip_feedback = not st.toggle(
        "üí¨ –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞", value=True
    )
    llm_choice = select_llm()
    return skip_feedback, llm_choice


def create_results_section(check_criteria, check_result, feedback):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.

    Args:
        check_criteria (str): –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown
        check_result (str): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown
        feedback (str): –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown –∏–ª–∏ None
    """
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏")
    with st.expander("–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:", icon="üìã"):
        st.markdown(check_criteria)

    with st.expander("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:", icon="üìù"):
        st.markdown(check_result)

    if feedback:
        with st.expander("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:", icon="üí¨"):
            st.markdown(feedback)


def create_user_feedback_form():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.

    Returns:
        tuple:
            - mark (str): –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ("–•–æ—Ä–æ—à–æ" –∏–ª–∏ "–ü–ª–æ—Ö–æ")
            - comment (str): –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            - sent_feedback (bool): –ë—ã–ª–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    """
    with st.expander("–û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏:", icon="‚≠ê"):
        mark = st.radio("–û—Ü–µ–Ω–∫–∞:", ["–•–æ—Ä–æ—à–æ", "–ü–ª–æ—Ö–æ"], index=0)
        comment = st.text_area("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
        sent_feedback = st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å")
        return mark, comment, sent_feedback
